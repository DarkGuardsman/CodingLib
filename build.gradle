




plugins {
  id 'net.saliman.cobertura' version '2.2.5'
  id 'com.github.kt3k.coveralls' version '2.0.1'
}

repositories {
        mavenCentral()
        jcenter()
}
dependencies{
    compile 'com.google.guava:guava:11.0.2'
    compile 'org.scala-lang:scala-library:2.11.1'
    testCompile 'junit:junit:4.11'
}

//Applies the scala plugin
apply plugin: 'scala'

apply from: 'https://raw.githubusercontent.com/BuiltBrokenModding/BuiltBrokenScripts/buildScripts/index-nonmc.gradle'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

ext.buildProps = file "build.properties"

def currentJvm = org.gradle.internal.jvm.Jvm.current()
println "Current Java version = " + currentJvm

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

if (project.getProperty("bambooshortPlanName") == "BBM-Dev") {
    group = "dev.builtbroken.codinglib"
    archivesBaseName = "CodingLib"
} else {
    group = "com.builtbroken.codinglib"
    archivesBaseName = "CodingLib"
}

println archivesBaseName 

version = "${config.version.mod.major}.${config.version.mod.minor}.${config.version.mod.revis}b"

// This is used to set the local version
if (project.hasProperty("bambooBuildNumber"))
    version += project.bambooBuildNumber
else
    version += getDate()

println "version = "+ version

archivesBaseName = "CodingLib"

jar {
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": currentJvm,
            "Implementation-Title": archivesBaseName,
            "Implementation-Version": project.version,
    )
}



def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

file("CodingLib.txt").text = version;
